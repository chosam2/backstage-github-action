name: Manage EC2 Instance
on:
  workflow_dispatch:
    inputs:
      instanceName:
        description: 'Name of the AWS Instance'
        required: true
      awsRegion:
        description: 'AWS Region for the instance'
        required: true
      instanceType:
        type: choice      
        description: 'AWS instance type'
        required: true
        options: 
        - t3.micro        
        - t3.small        
        - t3.medium        
      action:
        description: 'Action to perform (apply/destroy)'
        required: true

# env:
  # TF_CLOUD_ORGANIZATION: "hyungwook"
  # TF_WORKSPACE: "ec2-workspace"
  # TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
env:
  TF_VAR_instance_name: ${{ github.event.inputs.instanceName }}
  TF_VAR_aws_region: ${{ github.event.inputs.awsRegion }}
  TF_VAR_instance_type: ${{ github.event.inputs.instanceType }}

jobs:
  apply_ec2:
    runs-on: self-hosted
    if: ${{ github.event.inputs.action == 'apply' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        path: ${{ github.event.inputs.instanceName }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.awsRegion }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Debug Environment Variables
      run: |
        echo "TF_VAR_instance_name: $TF_VAR_instance_name"
        echo "TF_VAR_aws_region: $TF_VAR_aws_region"
        echo "TF_VAR_instance_type: $TF_VAR_instance_type"
        terraform --version

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ github.event.inputs.instanceName }}

    - name: Terraform Format
      run: terraform fmt
      working-directory: ${{ github.event.inputs.instanceName }}

    - name: Terraform Validate
      run: terraform validate
      working-directory: ${{ github.event.inputs.instanceName }}

    - name: Terraform Apply
      # run: terraform apply -auto-approve -var="instance_name=${{ github.event.inputs.instanceName }}" -var="aws_region=${{ github.event.inputs.awsRegion }}" -var="instance_type=${{ github.event.inputs.instanceType }}"
      run: terraform apply -auto-approve 
      working-directory: ${{ github.event.inputs.instanceName }}

  destroy_instance:
    runs-on: self-hosted
    if: ${{ github.event.inputs.action == 'destroy' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        path: ${{ github.event.inputs.instanceName }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.awsRegion }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Init
      run: terraform init
      # working-directory: ${{ github.event.inputs.instanceName }}

    - name: Terraform Format
      run: terraform fmt
      # working-directory: ${{ github.event.inputs.instanceName }}

    - name: Terraform Destroy
      # run: terraform destroy -auto-approve -var="instance_name=${{ github.event.inputs.instanceName }}" -var="aws_region=${{ github.event.inputs.awsRegion }}" -var="instance_type=${{ github.event.inputs.instanceType }}"
      run: terraform destroy -auto-approve 
      # working-directory: ${{ github.event.inputs.instanceName }}